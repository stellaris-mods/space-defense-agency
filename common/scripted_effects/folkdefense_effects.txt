
# ROOT/THIS is the country scope
fd_get_wormhole_hp = {
	random_owned_ship = {
		limit = {
			has_ship_flag = "folksda_platform_invis_ship"
			fleet = { is_same_value = event_target:folksda_wormholefleet }
		}
		switch = {
			trigger = has_hp
			2390 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 2400 } } } #100%
			2270 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 2280 } } } #90%
			2150 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 2160 } } } #80%
			2030 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 2040 } } } #70%
			1910 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 1920 } } } #60%
			1790 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 1800 } } } #50%
			1670 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 1680 } } } #40%
			1550 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 1560 } } } #30%
			1430 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 1440 } } } #20%
			1310 > { ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 1320 } } } #10%
			default = {
				ROOT = { set_variable = { which = "SDABaseWormholeHP" value = 1200 } }
			}
		}
	}
}

# PREV is the hostile fleet
# THIS is the owner of the incoming wormholes
fd_count_hitpoints = {
	# First we need to save a reference to the fleet
	# = folksda_targetfleet
	set_variable = {
		which = "SDAFleetHP"
		value = 0
	}
	# Then we need to save the owner
	# actually we dont any more because I changed how it works, but
	# I dont want to re-analyze the scopes here
	PREV = { owner = { save_event_target_as = fd_count_owner } }
	# Then we scope to the owner, check every_owned_ship that is
	# in the same fleet
	event_target:fd_count_owner = {
		every_owned_ship = {
			limit = {
				fleet = { is_same_value = event_target:folksda_targetfleet }
			}
			switch = {
				trigger = has_hp
				9999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 10000 } } }
				8999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 9000 } } }
				7999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 8000 } } }
				6999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 7000 } } }
				5999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 6000 } } }
				4999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 5000 } } }
				3999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 4000 } } }
				2999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 3000 } } }
				1999 > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 2000 } } }
				999  > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 1000 } } }
				799  > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 800 } } }
				599  > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 600 } } }
				399  > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 400 } } }
				199  > { PREVPREV = { change_variable = { which = "SDAFleetHP" value = 200 } } }
				default = {
					PREVPREV = { change_variable = { which = "SDAFleetHP" value = 100 } }
				}
			}
		}
	}
}

# We can't just keep recreating the fleet every month because when we do set_location to the
# old station that we replace, it doesn't get an orbit above the planet. So we need to set a flag
# on the station and check if it needs to be recreated.
# The reason we use flags instead of a variable is so that we can switch{} on it

fd_updated_aura_station = {
	remove_planet_flag = "sda_aura_type_1"
	remove_planet_flag = "sda_aura_type_2"
	remove_planet_flag = "sda_aura_type_3"
	remove_planet_flag = "sda_aura_type_4"
	remove_planet_flag = "sda_aura_type_5"
	remove_planet_flag = "sda_aura_type_6"
	remove_planet_flag = "sda_aura_type_7"

	if = {
		limit = {
			AND = {
				has_spaceport_module = folksda_debuff_module
				has_spaceport_module = folksda_regen_module
				has_spaceport_module = folksda_snare_module
			}
		}
		set_planet_flag = "sda_aura_type_7"
		else = {
			if = {
				limit = {
					AND = {
						has_spaceport_module = folksda_debuff_module
						has_spaceport_module = folksda_regen_module
					}
				}
				set_planet_flag = "sda_aura_type_6"
				else = {
					if = {
						limit = {
							AND = {
								has_spaceport_module = folksda_debuff_module
								has_spaceport_module = folksda_snare_module
							}
						}
						set_planet_flag = "sda_aura_type_5"
						else = {
							if = {
								limit = {
									AND = {
										has_spaceport_module = folksda_regen_module
										has_spaceport_module = folksda_snare_module
									}
								}
								set_planet_flag = "sda_aura_type_4"
								else = {
									switch = {
										trigger = has_spaceport_module
										folksda_regen_module = {
											set_planet_flag = "sda_aura_type_3"
										}
										folksda_snare_module = {
											set_planet_flag = "sda_aura_type_2"
										}
										folksda_debuff_module = {
											set_planet_flag = "sda_aura_type_1"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	remove_planet_flag = "sda_keep_station"

	owner = {
		if = {
			limit = {
				any_owned_fleet = {
					is_ship_size = folksda_aura_station
					exists = orbit
					orbit = { is_same_value = PREVPREVPREV }
				}
			}
			random_owned_fleet = {
				limit = {
					is_ship_size = folksda_aura_station
					exists = orbit
					orbit = { is_same_value = PREVPREVPREV }
				}
				switch = {
					trigger = has_fleet_flag
					sda_aura_type_1 = {
						if = {
							limit = { NOT = { PREVPREV = { has_planet_flag = "sda_aura_type_1" } } }
							delete_fleet = THIS
							else = { PREVPREV = { set_planet_flag = "sda_keep_station" } }
						}
					}
					sda_aura_type_2 = {
						if = {
							limit = { NOT = { PREVPREV = { has_planet_flag = "sda_aura_type_2" } } }
							delete_fleet = THIS
							else = { PREVPREV = { set_planet_flag = "sda_keep_station" } }
						}
					}
					sda_aura_type_3 = {
						if = {
							limit = { NOT = { PREVPREV = { has_planet_flag = "sda_aura_type_3" } } }
							delete_fleet = THIS
							else = { PREVPREV = { set_planet_flag = "sda_keep_station" } }
						}
					}
					sda_aura_type_4 = {
						if = {
							limit = { NOT = { PREVPREV = { has_planet_flag = "sda_aura_type_4" } } }
							delete_fleet = THIS
							else = { PREVPREV = { set_planet_flag = "sda_keep_station" } }
						}
					}
					sda_aura_type_5 = {
						if = {
							limit = { NOT = { PREVPREV = { has_planet_flag = "sda_aura_type_5" } } }
							delete_fleet = THIS
							else = { PREVPREV = { set_planet_flag = "sda_keep_station" } }
						}
					}
					sda_aura_type_6 = {
						if = {
							limit = { NOT = { PREVPREV = { has_planet_flag = "sda_aura_type_6" } } }
							delete_fleet = THIS
							else = { PREVPREV = { set_planet_flag = "sda_keep_station" } }
						}
					}
					sda_aura_type_7 = {
						if = {
							limit = { NOT = { PREVPREV = { has_planet_flag = "sda_aura_type_7" } } }
							delete_fleet = THIS
							else = { PREVPREV = { set_planet_flag = "sda_keep_station" } }
						}
					}
				}
			}
		}
	}

	if = {
		limit = { NOT = { has_planet_flag = "sda_keep_station" } }
		switch = {
			trigger = has_planet_flag
			sda_aura_type_1 = {
				create_fleet = {
					name = "Spaceport Extension"
					settings = { spawn_debris = no }
					effect = {
						set_owner = PREV.owner
						set_fleet_flag = "sda_aura_type_1"
						create_ship = {
							name = ""
							prefix = no
							design = "Field Modulator H-741"
						}
						set_location = PREV
					}
				}
			}
			sda_aura_type_2 = {
				create_fleet = {
					name = "Spaceport Extension"
					settings = { spawn_debris = no }
					effect = {
						set_owner = PREV.owner
						set_fleet_flag = "sda_aura_type_2"
						create_ship = {
							name = ""
							prefix = no
							design = "Field Modulator U-F0E"
						}
						set_location = PREV
					}
				}
			}
			sda_aura_type_3 = {
				create_fleet = {
					name = "Spaceport Extension"
					settings = { spawn_debris = no }
					effect = {
						set_owner = PREV.owner
						set_fleet_flag = "sda_aura_type_3"
						create_ship = {
							name = ""
							prefix = no
							design = "Field Modulator F-103"
						}
						set_location = PREV
					}
				}
			}
			sda_aura_type_4 = {
				create_fleet = {
					name = "Spaceport Extension"
					settings = { spawn_debris = no }
					effect = {
						set_owner = PREV.owner
						set_fleet_flag = "sda_aura_type_4"
						create_ship = {
							name = ""
							prefix = no
							design = "Field Modulator F2-105"
						}
						set_location = PREV
					}
				}
			}
			sda_aura_type_5 = {
				create_fleet = {
					name = "Spaceport Extension"
					settings = { spawn_debris = no }
					effect = {
						set_owner = PREV.owner
						set_fleet_flag = "sda_aura_type_5"
						create_ship = {
							name = ""
							prefix = no
							design = "Field Modulator U2-F0F"
						}
						set_location = PREV
					}
				}
			}
			sda_aura_type_6 = {
				create_fleet = {
					name = "Spaceport Extension"
					settings = { spawn_debris = no }
					effect = {
						set_owner = PREV.owner
						set_fleet_flag = "sda_aura_type_6"
						create_ship = {
							name = ""
							prefix = no
							design = "Field Modulator F2-104"
						}
						set_location = PREV
					}
				}
			}
			sda_aura_type_7 = {
				create_fleet = {
					name = "Spaceport Extension"
					settings = { spawn_debris = no }
					effect = {
						set_owner = PREV.owner
						set_fleet_flag = "sda_aura_type_7"
						create_ship = {
							name = ""
							prefix = no
							design = "Field Modulator X3-F27"
						}
						set_location = PREV
					}
				}
			}
		}
	}
}

# THIS is a planet with a module
# ROOT/owner is the owner
sda_check_planet = {
	if = {
		limit = {
			OR = {
				sda_spawned_station_exists = no
				owner = { has_country_flag = "sda_upgrade_stations" }
				sda_can_upgrade_station_class = yes
			}
		}

		if = {
			# If we are spawning a new station, reset the age
			limit = { sda_spawned_station_exists = no }
			set_variable = {
				which = "SDAStationAge"
				value = 0
			}
		}

		# We need to create a new station, or update an existing one
		create_fleet = {
			effect = {
				set_name = "Space Defense Agency"
				set_owner = ROOT
			}
		}
		if = { limit = { fd_canbuild_level_4 = yes }
			# Create battle fortress
			last_created_fleet = {
				nsc_create_battle_fortress = yes
				random_owned_ship = {
					set_name = ""
					set_ship_flag = "folksda_platform"
				}
			}
		else = { if = { limit = { fd_canbuild_level_3 = yes }
			# Create fortress
			last_created_fleet = {
				create_ship = {
					name = ""
					random_existing_design = "military_station_large"
					effect = { set_ship_flag = "folksda_platform" }
				}
			}
		else = { if = { limit = { fd_canbuild_level_2 = yes }
			# Create station
			last_created_fleet = {
				create_ship = {
					name = ""
					random_existing_design = "military_station_medium"
					effect = { set_ship_flag = "folksda_platform" }
				}
			}
		else = {
			# Create platform
			last_created_fleet = {
				create_ship = {
					name = ""
					random_existing_design = "military_station_small"
					effect = { set_ship_flag = "folksda_platform" }
				}
			}
		} } } } } }

		last_created_fleet = {
			add_modifier = {
				modifier = "sda_freeoffice"
				days = -1
			}
		}

		if = {
			# This checks for the fleet flag folksda_platform
			limit = { sda_spawned_station_exists = yes }
			log = "[this.GetName]: SDA spawning upgraded station."
			solar_system = {
				random_fleet_in_system = {
					limit = { sda_is_spawned_station = yes }
					last_created_fleet = {
						set_location = PREV
						set_fleet_flag = "folksda_platform"
					}
					delete_fleet = THIS
				}
			}
			else = {
				log = "[this.GetName]: SDA spawning new station."
				last_created_fleet = {
					set_fleet_flag = "folksda_platform"
					set_location = {
						target = PREV
						distance = 40
						angle = random
					}
				}
			}
		}
	}
}


###############################################################################
# NSC Fake Effects
# These effects are provided by NSC now, so I don't have to reference invalid ship sizes.
#

nsc_create_battle_fortress = { }
# nsc_create_headquarters = { create_ship = { name = random random_existing_design = Headquarters } }
# nsc_create_drydock = { create_ship = { name = random random_existing_design = Drydock } }
# nsc_create_power_station = { create_ship = { name = random random_existing_design = PowerStation } }
# nsc_create_mining_base = { create_ship = { name = random random_existing_design = MiningBase } }
# nsc_create_sensor_station = { create_ship = { name = random random_existing_design = SensorStation } }
