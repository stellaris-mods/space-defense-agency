###############################################################################
# Makes autonomous assembler construct our modules if necessary
#

###############################################################################
# OUR OWN EFFECTS
#

ass_maybe_build_folksda_debuff_module = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = folksda_debuff_module
			owner = {
				any_owned_planet = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_debuff_module }
					can_build_spaceport_module = folksda_debuff_module
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_debuff_module }
					can_build_spaceport_module = folksda_debuff_module
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_folksda_debuff_module"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing folksda_debuff_module at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_maybe_build_folksda_regen_module = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = folksda_regen_module
			owner = {
				any_owned_planet = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_regen_module }
					can_build_spaceport_module = folksda_regen_module
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_regen_module }
					can_build_spaceport_module = folksda_regen_module
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_folksda_regen_module"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing folksda_regen_module at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_maybe_build_folksda_snare_module = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = folksda_snare_module
			owner = {
				any_owned_planet = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_snare_module }
					can_build_spaceport_module = folksda_snare_module
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_snare_module }
					can_build_spaceport_module = folksda_snare_module
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_folksda_snare_module"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing folksda_snare_module at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_maybe_build_folksda_platform_module = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = folksda_platform_module
			owner = {
				any_owned_planet = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_platform_module }
					can_build_spaceport_module = folksda_platform_module
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_platform_module }
					can_build_spaceport_module = folksda_platform_module
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 750 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 270 } }
					set_ship_flag = "ass_op_sm_folksda_platform_module"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing folksda_platform_module at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_maybe_build_folksda_hangar_module = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = folksda_hangar_module
			owner = {
				any_owned_planet = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_hangar_module }
					can_build_spaceport_module = folksda_hangar_module
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					sda_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = folksda_hangar_module }
					can_build_spaceport_module = folksda_hangar_module
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 150 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 270 } }
					set_ship_flag = "ass_op_sm_folksda_hangar_module"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing folksda_hangar_module at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

###############################################################################
# EFFECTS WE OVERRIDE FROM AUTONOMOUS ASSEMBLER

# This effect is invoked before vanilla modules are checked
sda_ass_module_pre = {
	# Prioritize platform module
	ass_maybe_build_folksda_platform_module = yes
}

# This effect is invoked after vanilla modules are checked
# Never invoked if we already found something to build.
sda_ass_module_post = {
	ass_maybe_build_folksda_debuff_module = yes
	ass_maybe_build_folksda_regen_module = yes
	ass_maybe_build_folksda_snare_module = yes
	ass_maybe_build_folksda_hangar_module = yes
}

# This effect is invoked after the mission is completed OR aborted,
# just to clean up unused ship/fleet/etc flags and variables
# (decluttering the debugtooltip mostly)
sda_ass_module_remove_data = {
	remove_ship_flag = "ass_op_sm_folksda_debuff_module"
	remove_ship_flag = "ass_op_sm_folksda_regen_module"
	remove_ship_flag = "ass_op_sm_folksda_snare_module"
	remove_ship_flag = "ass_op_sm_folksda_platform_module"
	remove_ship_flag = "ass_op_sm_folksda_hangar_module"
}

# This effect is invoked after the vanilla construction effects,
# which means that this is where you will need to actually pop the
# module into place.
sda_ass_module_complete = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_folksda_debuff_module = { ass_build_folksda_debuff_module = yes }
		ass_op_sm_folksda_regen_module = { ass_build_folksda_regen_module = yes }
		ass_op_sm_folksda_snare_module = { ass_build_folksda_snare_module = yes }
		ass_op_sm_folksda_platform_module = { ass_build_folksda_platform_module = yes }
		ass_op_sm_folksda_hangar_module = { ass_build_folksda_hangar_module = yes }
	}
}
