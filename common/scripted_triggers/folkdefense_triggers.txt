
sda_valid_spaceport_module_planet = {
	# --- Snip this into a scripted trigger for ease
	NOT = { has_planet_flag = "ass_target" }
	has_spaceport = yes
	has_spaceport_construction = no
	has_free_spaceport_module_slot = yes
	is_occupied_flag = no
	has_ground_combat = no
	controller = { is_same_value = ROOT.owner }
	# ---
}

# Battle Fortress
# THIS is the planet
fd_canbuild_level_4 = {
	has_global_flag = "has_nsc_active"
	check_variable = {
		which = "SDAStationAge"
		value > 107
	}
	owner = {
		has_technology = "tech_battle_fortress_1"
		fd_atleast_four_offices = yes
	}
}

# Fortress
# THIS is the planet
fd_canbuild_level_3 = {
	check_variable = {
		which = "SDAStationAge"
		value > 71
	}
	owner = {
		has_technology = "tech_space_defense_station_3"
		fd_atleast_three_offices = yes
	}
}

# Defense Station
# THIS is the planet
fd_canbuild_level_2 = {
	check_variable = {
		which = "SDAStationAge"
		value > 35
	}
	owner = {
		has_technology = "tech_space_defense_station_2"
		fd_atleast_two_offices = yes
	}
}

fd_canbuild_level_1 = {
	owner = { fd_atleast_one_office = yes }
}

fd_atleast_one_office = {
	count_owned_pops = {
		limit = { exists = tile tile = { has_building = building_sdaoffice } }
		count > 0
	}
}
fd_atleast_two_offices = {
	count_owned_pops = {
		limit = { exists = tile tile = { has_building = building_sdaoffice } }
		count > 1
	}
}
fd_atleast_three_offices = {
	count_owned_pops = {
		limit = { exists = tile tile = { has_building = building_sdaoffice } }
		count > 2
	}
}
fd_atleast_four_offices = {
	count_owned_pops = {
		limit = { exists = tile tile = { has_building = building_sdaoffice } }
		count > 3
	}
}

sda_build_tile_perfect = {
	has_blocker = no
	has_building = no
	has_building_construction = no
	has_any_resource = no
}

sda_valid_station_planet = {
	has_spaceport = yes
	is_occupied_flag = no
	has_ground_combat = no
	has_spaceport_module = "folksda_platform_module"
	solar_system = {
		exists = space_owner
		space_owner = { is_country = ROOT }
	}
	NOT = {
		solar_system = {
			any_ship_in_system = {
				exists = owner
				owner = { is_hostile = ROOT }
			}
		}
	}
}

# ROOT is the country
# PREV is the planet
sda_is_spawned_station = {
	exists = owner
	owner = { is_same_value = ROOT }
	has_fleet_flag = "folksda_platform"
	distance = {
		source = PREVPREV
		max_distance = 41
		min_distance = 38
	}
}

sda_spawned_station_exists = {
	solar_system = {
		any_ship_in_system = {
			exists = owner
			owner = { is_same_value = ROOT }
			exists = fleet
			fleet = { has_fleet_flag = "folksda_platform" }
			distance = {
				source = PREVPREV
				max_distance = 41
				min_distance = 38
			}
		}
	}
}

sda_can_upgrade_station_class = {
	solar_system = {
		any_ship_in_system = {
			exists = owner
			owner = { is_same_value = ROOT }
			exists = fleet
			fleet = { has_fleet_flag = "folksda_platform" }
			distance = {
				source = PREVPREV
				max_distance = 41
				min_distance = 38
			}
			OR = {
				AND = {
					is_ship_size = military_station_large
					PREVPREV = { fd_canbuild_level_4 = yes }
				}
				AND = {
					is_ship_size = military_station_medium
					PREVPREV = { fd_canbuild_level_3 = yes }
				}
				AND = {
					is_ship_size = military_station_small
					PREVPREV = { fd_canbuild_level_2 = yes }
				}
			}
		}
	}
}


###############################################################################
# NSC Fake Triggers
# These effects are provided by NSC now, so I don't have to reference invalid ship sizes.
#

nsc_is_battle_fortress = { always = no }
# nsc_is_headquarters = { is_ship_size = Headquarters }
# nsc_is_drydock = { is_ship_size = Drydock }
# nsc_is_power_station = { is_ship_size = PowerStation }
# nsc_is_mining_base = { is_ship_size = MiningBase }
# nsc_is_sensor_station = { is_ship_size = SensorStation }

